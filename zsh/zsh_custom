# alias rm='echo "This is not the command you are looking for."; false'
alias open='xdg-open'
alias getsong="youtube-dl -x --output '%(title)s.%(ext)s' --audio-format mp3 -f bestaudio --add-metadata --no-playlist "
alias mkreport="~/miniconda3/envs/deep/bin/jupyter nbconvert --template=/home/lapo/dotfiles/report.tpl --to=html "
# alias tasknext="while true; do clear && task next limit:5; sleep 3; done"
alias untar="tar -xvf"
alias untargz="tar -zxvf"
alias untarbz2="tar -xvjf"
alias tarlist="tar -tvf"
alias targzlist="tar -ztvf"
alias tarbz2list="tar -jtvf"
alias sizes="du -h --max-depth=1 | sort --human-numeric-sort"
alias rcd="source ranger"
# from https://superuser.com/a/1043815
alias ranger='ranger --choosedir=$HOME/.rangerdir; LASTDIR=`cat $HOME/.rangerdir`; cd "$LASTDIR"'
alias fiximports="isort . && autoflake -r --in-place --remove-unused-variables *.py"


xgpuavail(){
  nvidia-smi -q -i GPU-38d0c7a5-d024-2623-d699-057ac67713ba | grep "FB Memory Usage" -A 3 | grep "Free" | awk '{ print $3 " " $4 }'
}

pymux(){
  # Interactive editing of python files in tmux + ipython split

  if [ "$#" -ne 1 ]; then
    echo "Select 1 target file."
    return
  fi

  if [[ "$CONDA_PREFIX" != *"/envs/"* ]]; then
    echo "Activate a conda environment with ipython first."
    return
  fi

  if ! { [ -n "$TMUX" ]; } then
    echo "Activate tmux first."
    return
  fi

  CONDA_ENV=$(basename $CONDA_PREFIX)
  echo "Conda env: $CONDA_ENV"
  echo "Editing $1"

  tmux split-window -h -p 30
  tmux send-keys 'conda activate ' $CONDA_ENV C-m
  tmux send-keys 'clear' C-m
  tmux send-keys 'ipython' C-m

  # start with focus on vim
  tmux select-pane -L
  tmux send-keys 'nvim ' $1 C-m

}

pyentr(){
  # rerun python scripts on file change
  if [[ "$1" != *.py ]]; then
    echo "Please select a python script."
    return
  fi

  if [[ "$CONDA_PREFIX" != *"/envs/"* ]]; then
    echo "Activate a conda environment first."
    return
  fi
  echo $1 | entr -c python /_
}

prettyjson(){
  cat $1 | python -mjson.tool > pretty-$1
}

toteton(){

  src_dir=$PWD
  curr_dir=${PWD##*/}
  dst_dir="teton:proj/"

  if [[ $1 == up ]]; then
    echo Copy $src_dir to $dst_dir
    rsync -av --progress --delete --filter=':- .gitignore' $src_dir $dst_dir
  else
    echo DRYRUN: Copy $src_dir to $dst_dir
    rsync -av --dry-run --delete --filter=':- .gitignore' $src_dir $dst_dir
  fi

}

getbib(){
  # Give this script a .pdf and it will attempt
  # to return a proper .bib citation via doi.
  # Internet connection required.

  # Get the doi from metadata, if not possible, get
  # doi from pdftotext output, if not possible, try regex
  # adapted from https://www.crossref.org/blog/dois-and-matching-regular-expressions/
  # then if nothing worked surrender.
  doi=$(pdfinfo $1 | grep -o "doi:.*") ||
  doi=$(pdftotext $1 - | grep -o "doi.*" -m 1) ||
  doi=$(pdftotext $1 - | egrep -o "10\.[[:digit:]]{4,9}/[-\.;()/:a-zA-Z0-9]+" -m 1)
  echo "No DOI found."

  # Check crossref.org for the bib citation.
  curl -s "http://api.crossref.org/works/$doi/transform/application/x-bibtex" -w "\n" | sed -e "/^[^\(\t\|@\|}\)]/d"
}

# fromteton(){

#   dst_dir="teton:proj/"

#   if [[ $1 == down ]]; then
#     echo Copy $src_dir to $dst_dir
#     rsync -av --progress --delete --exclude '*.hebb' --exclude '*.model' $src_dir $dst_dir
#   else
#     echo DRYRUN: Copy $src_dir to $dst_dir
#     rsync -av --dry-run --delete --exclude '*.hebb' --exclude '*.model' $src_dir $dst_dir
#   fi

# }

# papers() {
#   # Use fzf to search within the text of my Zotero papers and open them
# 	RG_PREFIX="rga --files-with-matches"
#   ORIGIN=$(pwd)
#   cd /home/lapo/Dropbox/Apps/Zotero
# 	local file
# 	file="$(
# 		FZF_DEFAULT_COMMAND="$RG_PREFIX '$1'" \
# 			fzf --sort --preview="[[ ! -z {} ]] && rga --pretty --context 5 {q} {}" \
# 				--phony -q "$1" \
# 				--bind "change:reload:$RG_PREFIX {q}" \
# 				--preview-window="50%:wrap"
# 	)"

#   if [ -z "$file" ]
#   then
#     echo "No file selected"
#   else
#     echo "opening: $file"
#     i3-msg layout tabbed &>/dev/null
#     xdg-open "$file" &>/dev/null
#   fi

#   cd $ORIGIN
# }

waconfig(){
  # Set up my old wacom bamboo touch, turning off touch and mapping it to the left screen
  touchID=$(xsetwacom list devices | grep TOUCH | sed 's/.*id: \([0-9]*\).*/\1/')
  stylusID=$(xsetwacom list devices | grep STYLUS | sed 's/.*id: \([0-9]*\).*/\1/')
  eraserID=$(xsetwacom list devices | grep ERASER | sed 's/.*id: \([0-9]*\).*/\1/')
  padID=$(xsetwacom list devices | grep PAD | sed 's/.*id: \([0-9]*\).*/\1/')
  # echo touch $touchID
  # echo stylus $stylusID

  # Map stylus/eraser to main monitor +1920+0 for secondary monitor
  # Using vertical monitor size is 1080x1920 so offset is 1080
  xsetwacom set $stylusID MapToOutput 1920x1080+1080+0
  xsetwacom set $eraserID MapToOutput 1920x1080+1080+0

  # Set left-handed mode to have more convenient cable direction to pc
  # xsetwacom set $stylusID rotate HALF
  # xsetwacom set $eraserID rotate HALF

  # Touch support sucks
  xsetwacom set $touchID TOUCH off

  # Disable useless buttons, buttons 4-7 are special?
  for e in {1..3} {8..9}
  do
    xsetwacom set $padID Button "$e" "button 0"
  done
}

vtt2txt(){
  # from https://stackoverflow.com/questions/56927772/convert-webvtt-file-from-youtube-to-plain-text
  sed -e '1,4d' -E -e '/^$|]|>$|%$/d' $1 | awk '!seen[$0]++' | tr '\n' ' '
}

yt2txt(){
  TMP=$(mktemp)
  echo $TMP
  youtube-dl --write-auto-sub -o $TMP --skip-download $1
  VTT="$TMP.en.vtt"
  echo $VTT
  vtt2txt $VTT
  rm $VTT
  rm $TMP
}

bright(){
  if (( $1 <= 1.0 )) && (( $1 > 0.1 )) ; then
    echo "Brightness level set to $1"
    for DEVICE in $(xrandr --prop | grep " connected" | awk '{ print $1 }'); do
      xrandr --output $DEVICE --brightness $1
    done
  else
    echo "Brightness level b must satisfy: 0 < b <= 1 ( $1 )"
  fi
}

sshmnt(){
  if [ "$#" -ne 2 ]; then
      # https://stackoverflow.com/a/18568726
      echo "Usage: sshmnt server folder"
  else
      sshfs -o follow_symlinks "$1:" "$2"
  fi
}

sshunmnt(){
  if [ "$#" -ne 1 ]; then
      # https://stackoverflow.com/a/18568726
      echo "Usage: sshunmnt folder"
  else
      fusermount3 -u "$1"
  fi
}

rsend(){
  if [ "$#" -ne 2 ]; then
      # https://stackoverflow.com/a/18568726
      echo "Usage: rsend  folder server"
  else
      # -a                      archive mode (contains recursive)
      # -h                      human readable
      # --update only           change older files (don't risk sending an old version and overwrite newer stuff)
      # --info=progress2        show progress about the whole transfer
      # --filer=':- .gitignore' respect .gitignore
      while true; do
        # https://superuser.com/a/556006
        read "yn?> Send FROM=\"$1\" TO=\"$2\"?[y/N] "
        case $yn in
            [Yy]* ) rsync -ahz --update --info=progress2 --filter=':- .gitignore' $1 $2 ; break;;
            * ) break;;
        esac
      done
  fi
}

SNURM_CLIENT_PATH="/home/lapo/git/SNURM/client.py"
SNURM_SERVER_PATH="/home/lapo/git/SNURM/server.py"

sstart(){
  python $SNURM_SERVER_PATH
}

sadd(){
  CMD="$*"

  if [[ "$CONDA_PREFIX" != *"/envs/"* ]]; then
    echo "Activate a conda environment first."
    return
  fi
  CONDA_ENV=$(basename $CONDA_PREFIX)
  echo "Conda env: $CONDA_ENV"
  echo "Command: $CMD"

  OUT=$(python $SNURM_CLIENT_PATH "add" --cmd "$CMD" --env "$CONDA_ENV")
  slist
}

slist(){
  STATUS=$(python $SNURM_CLIENT_PATH "list")
  echo $STATUS
}

skill(){
  STATUS=$(python $SNURM_CLIENT_PATH "skill")
  echo $STATUS
}

scancel(){
  ID=$1
  STATUS=$(python $SNURM_CLIENT_PATH "cancel" --id "$1")
  echo $STATUS
}

punzip(){
   unzip $1 | pv -l -s $(unzip -Z -1 $1 | wc -l) > /dev/null;
}

dirsizes(){
 du -b -h --max-depth=1 | sort --human-numeric-sort
}

bindkey -r "^[x"
bindkey -s '^o' 'ranger\n'
# Edit line in vim with ctrl-e:
autoload edit-command-line; zle -N edit-command-line
bindkey '^{e' edit-command-line
