# alias rm='echo "This is not the command you are looking for."; false'
alias open='xdg-open'
alias getsong="youtube-dl -x --output '%(title)s.%(ext)s' --audio-format mp3 -f bestaudio --add-metadata --no-playlist "
alias mkreport="~/miniconda3/envs/deep/bin/jupyter nbconvert --template=/home/lapo/dotfiles/report.tpl --to=html "
alias tasknext="while true; do clear && task next limit:5; sleep 3; done"
alias untar="tar -xvf"
alias untargz="tar -zxvf"
alias untarbz2="tar -xvjf"
alias tarlist="tar -tvf"
alias targzlist="tar -ztvf"
alias tarbz2list="tar -jtvf"
alias sizes="du -h --max-depth=1 | sort --human-numeric-sort"
alias rcd="source ranger"

pymux(){
  # Interactive editing of python files in tmux + ipython split

  if [ "$#" -ne 1 ]; then
    echo "Select 1 target file."
    return
  fi

  if [[ "$CONDA_PREFIX" != *"/envs/"* ]]; then
    echo "Activate a conda environment with ipython first."
    return
  fi

  CONDA_ENV=$(basename $CONDA_PREFIX)
  echo "Conda env: $CONDA_ENV"
  echo "Editing $1"

  # Am I in tmux already?
  if ! { [ "$TERM" = "screen" ] && [ -n "$TMUX" ]; } then
    # No, then create new session 
    tmux new -d -x $(tput cols) -y $(tput lines)
    # get session name to attach to it later
    SESSION=$(tmux display-message -p "#S")
    echo "Creating session $SESSION"
    # start conda in the new session
    tmux send-keys 'conda activate ' $CONDA_ENV C-m
  fi

  tmux split-window -h -p 30
  tmux send-keys 'conda activate ' $CONDA_ENV C-m
  tmux send-keys 'clear' C-m
  tmux send-keys 'ipython' C-m
  tmux send-keys '%load_ext autoreload' Enter
  tmux send-keys '%autoreload 2' Enter

  # start with focus on vim
  tmux select-pane -L
  tmux send-keys 'nvim ' $1 C-m

  if [ "$SESSION" != "" ]; then
    tmux attach-session -t $SESSION
  fi
}

pyentr(){
  if [[ "$CONDA_PREFIX" != *"/envs/"* ]]; then
    echo "Activate a conda environment first."
    return
  fi
  echo $1 | entr -c python /_
}

prettyjson(){
  cat $1 | python -mjson.tool > pretty-$1
}

toteton(){

  src_dir=$PWD
  curr_dir=${PWD##*/}
  dst_dir="teton:proj/"

  if [[ $1 == up ]]; then
    echo Copy $src_dir to $dst_dir
    rsync -av --progress --delete --filter=':- .gitignore' $src_dir $dst_dir
  else
    echo DRYRUN: Copy $src_dir to $dst_dir
    rsync -av --dry-run --delete --filter=':- .gitignore' $src_dir $dst_dir
  fi

}

getbib(){
  # Give this script a .pdf and it will attempt
  # to return a proper .bib citation via doi.
  # Internet connection required.

  # Get the doi from metadata, if not possible, get
  # doi from pdftotext output, if not possible, try regex
  # adapted from https://www.crossref.org/blog/dois-and-matching-regular-expressions/
  # then if nothing worked surrender.
  doi=$(pdfinfo $1 | grep -o "doi:.*") ||
  doi=$(pdftotext $1 - | grep -o "doi.*" -m 1) ||
  doi=$(pdftotext $1 - | egrep -o "10\.[[:digit:]]{4,9}/[-\.;()/:a-zA-Z0-9]+" -m 1)
  echo "No DOI found."

  # Check crossref.org for the bib citation.
  curl -s "http://api.crossref.org/works/$doi/transform/application/x-bibtex" -w "\n" | sed -e "/^[^\(\t\|@\|}\)]/d"
}

# fromteton(){

#   dst_dir="teton:proj/"

#   if [[ $1 == down ]]; then
#     echo Copy $src_dir to $dst_dir
#     rsync -av --progress --delete --exclude '*.hebb' --exclude '*.model' $src_dir $dst_dir
#   else
#     echo DRYRUN: Copy $src_dir to $dst_dir
#     rsync -av --dry-run --delete --exclude '*.hebb' --exclude '*.model' $src_dir $dst_dir
#   fi

# }

papers() {
  # Use fzf to search within the text of my Zotero papers and open them
	RG_PREFIX="rga --files-with-matches"
  ORIGIN=$(pwd)
  cd /home/lapo/Dropbox/Apps/Zotero
	local file
	file="$(
		FZF_DEFAULT_COMMAND="$RG_PREFIX '$1'" \
			fzf --sort --preview="[[ ! -z {} ]] && rga --pretty --context 5 {q} {}" \
				--phony -q "$1" \
				--bind "change:reload:$RG_PREFIX {q}" \
				--preview-window="50%:wrap"
	)"

  if [ -z "$file" ]
  then
    echo "No file selected"
  else
    echo "opening: $file"
    i3-msg layout tabbed &>/dev/null
    xdg-open "$file" &>/dev/null
  fi

  cd $ORIGIN
}

waconfig(){
  # Set up my old wacom bamboo touch, turning off touch and mapping it to the left screen
  touchID=$(xsetwacom list devices | grep TOUCH | sed 's/.*id: \([0-9]*\).*/\1/')
  stylusID=$(xsetwacom list devices | grep STYLUS | sed 's/.*id: \([0-9]*\).*/\1/')
  eraserID=$(xsetwacom list devices | grep ERASER | sed 's/.*id: \([0-9]*\).*/\1/')
  padID=$(xsetwacom list devices | grep PAD | sed 's/.*id: \([0-9]*\).*/\1/')
  # echo touch $touchID
  # echo stylus $stylusID

  # Map stylus/eraser to main monitor +1920+0 for secondary monitor
  xsetwacom set $stylusID MapToOutput 1920x1080+0+0
  xsetwacom set $eraserID MapToOutput 1920x1080+0+0

  # Set left-handed mode to have more convenient cable direction to pc
  xsetwacom set $stylusID rotate HALF
  xsetwacom set $eraserID rotate HALF

  # Touch support sucks
  xsetwacom set $touchID TOUCH off

  # Disable useless buttons, buttons 4-7 are special?
  for e in {1..3} {8..9}
  do
    xsetwacom set $padID Button "$e" "button 0"
  done
}

vtt2txt(){
  # from https://stackoverflow.com/questions/56927772/convert-webvtt-file-from-youtube-to-plain-text
  sed -e '1,4d' -E -e '/^$|]|>$|%$/d' $1 | awk '!seen[$0]++' | tr '\n' ' '
}

yt2txt(){
  TMP=$(mktemp)
  echo $TMP
  youtube-dl --write-auto-sub -o $TMP --skip-download $1
  VTT="$TMP.en.vtt"
  echo $VTT
  vtt2txt $VTT
  rm $VTT
  rm $TMP
}

bright(){
  if (( $1 <= 1.0 )) && (( $1 > 0.1 )) ; then
    echo "Brightness level set to $1"
    for DEVICE in $(xrandr --prop | grep " connected" | awk '{ print $1 }'); do
      xrandr --output $DEVICE --brightness $1
    done
  else
    echo "Brightness level b must satisfy: 0 < b <= 1 ( $1 )"
  fi
}

bindkey -r "^[x"
bindkey -s '^o' 'ranger\n'
# Edit line in vim with ctrl-e:
autoload edit-command-line; zle -N edit-command-line
bindkey '^e' edit-command-line
